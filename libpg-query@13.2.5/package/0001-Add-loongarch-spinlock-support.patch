Subject: Add loongarch spinlock support.

---
 src/postgres/include/storage/s_lock.h | 42 +++++++++++++++++++++++++++
 1 file changed, 42 insertions(+)

diff --git a/src/postgres/include/storage/s_lock.h b/src/postgres/include/storage/s_lock.h
index 31a5ca6..3ab78f4 100644
--- a/src/postgres/include/storage/s_lock.h
+++ b/src/postgres/include/storage/s_lock.h
@@ -673,6 +673,48 @@ do \
 #endif /* __mips__ && !__sgi */
 
 
+#if defined(__loongarch__)   /* loongarch */
+#define HAS_TEST_AND_SET
+
+typedef unsigned int slock_t;
+
+#define TAS(lock) tas(lock)
+
+static __inline__ int
+tas(volatile slock_t *lock)
+{
+        register volatile slock_t *_l = lock;
+        register int _res;
+        register int _tmp;
+
+        __asm__ __volatile__(
+                "       ll.w    %0, %2      \n"
+                "       ori     %1, %0, 1   \n"
+                "       sc.w    %1, %2      \n"
+                "       xori    %1, %1, 1   \n"
+                "       or      %0, %0, %1  \n"
+                "       dbar    0           \n"
+:               "=&r" (_res), "=&r" (_tmp), "+R" (*_l)
+:               /* no inputs */
+:               "memory");
+        return _res;
+}
+
+/* MIPS S_UNLOCK is almost standard but requires a "sync" instruction */
+#define S_UNLOCK(lock)  \
+do \
+{ \
+        __asm__ __volatile__( \
+                "  dbar  0 \n" \
+:               /* no outputs */ \
+:               /* no inputs */ \
+:               "memory"); \
+        *((volatile slock_t *) (lock)) = 0; \
+} while (0)
+
+#endif /* __loongarch__ */
+
+
 #if defined(__m32r__) && defined(HAVE_SYS_TAS_H)	/* Renesas' M32R */
 #define HAS_TEST_AND_SET
 
-- 
2.20.1

